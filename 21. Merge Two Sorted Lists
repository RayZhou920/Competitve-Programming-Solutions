21. Merge Two Sorted Lists

Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

 

Example 1:


Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]








// Solution 1: Iterative
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode pre = dummy;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                pre.next = l1;
                l1 = l1.next;
            }
            else {
                pre.next = l2;
                l2 = l2.next;
            }
            pre = pre.next;
        }
        if (l1 != null) {
            pre.next = l1;
            l1 = l1.next;
            pre = pre.next;
        }
        if (l2 != null) {
            pre.next = l2;
            l2 = l2.next;
            pre = pre.next;
        }
        return dummy.next; // --->head
    }
}

// Solution 2: Recursion
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // base case;
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        // 假如l1第一个节点小于l2，将l1第二个节点与l2第一个节点比，以此类推，所以l1.next = mergeTwoLists(l1.next, l2);
        if (l1.val <= l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        // 假如l2第一个节点小于l1，将l2第二个节点与l1第一个节点比，以此类推，所以l2.next = mergeTwoLists(l1, l2.next);
        else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}
